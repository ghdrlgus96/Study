
//state 패턴
/*
interface State {	//State interface
	void speedUp(Plane plane);	//speedUp 경우
	void speedDown(Plane plane);	//speddDown 경우
}

class StopState implements State {	//Stop 상태를 나타내는 class 구현
	public void speedUp(Plane plane) {
		System.out.println("Plane이 달리기 시작합니다");
		plane.setState(new RunState());	//SpeedUp 실행하면 상태는 Run으로 바꾼다
	}
	public void speedDown(Plane plane) {
		System.out.println("이미 정지된 상태입니다");
	}
}

class RunState implements State {	//Run 상태를 나타내는 class 구현
	public void speedUp(Plane plane) {
		System.out.println("Plane이 날기 시작합니다");
		plane.setState(new FlyState());	//SpeedUp 실행하면 상태는 Fly으로 바꾼다
	}
	public void speedDown(Plane plane) {
		System.out.println("Plane이 정지합니다");
		plane.setState(new StopState());	//SpeedDwon 실행하면 상태는 Stop으로 바꾼다
	}
}

class FlyState implements State {	//Fly 상태를 나타내는 class 구현
	public void speedUp(Plane plane) {
		System.out.println("이미 날고있는 상태입니다");
	}
	public void speedDown(Plane plane) {
		System.out.println("Plane이 달리기 시작합니다");
		plane.setState(new RunState());	//SpeedDwon 실행하면 상태는 Run으로 바꾼다
	}
}

class Plane {
	private State state;	//상태를 저장할 변수 선언
	public Plane() {
		state = new StopState();	//처음 상태는 Stop으로 초기화
	}
	public void setState(State state) {
		this.state = state;
	}
	public void speedUp() {	//SpeedUp시 자기 자신을 넘겨 상태변화한다
		state.speedUp(this);
	}
	public void speedDown() {	//SpeedDwon시 자기 자신을 넘겨 상태변화한다
		state.speedDown(this);
	}
}

public class SE {
	public static void main(String[] args) {
		Plane plane = new Plane();
		plane.speedUp();	//동일한 코드지만 싱태에 따라 실행결과가 다르다
		plane.speedUp();
		plane.speedUp();
		plane.speedDown();
		plane.speedDown();
		plane.speedDown();
	}
}
*/

//memento 패턴
/*
import java.util.*;

class Text {
	private ArrayList<Memento> memento = new ArrayList<>();
	//memento를 저장할 ArrayList 선언
	private String text;	//현재 저장되어 있는 문자열
	
	public void setText(String text) {	//현재 저장되어 있는 문자열 교체
		System.out.println(text);
		this.text = text;
	}
	
	public void showText() {	//현재 저장되어 있는 문자열 출력
		System.out.println(text);
	}
	
	public void createMemento() {	//memento를 생성하는 메소드
		System.out.println("save memento!");
		memento.add(new Memento(text));	//memento를 저장하는 ArrayList에 현재 상태를 저장
	}
	
	public void setMemento(int num) {	//memento에서 불러오고 싶은 상태를 불러와서 현재 상태로 바꾼다
		this.text = memento.get(num).getState();
	}
	
	private class Memento {	//현재상태를 저장할 class를 내부 class로 하였다.
		private String text;	//현재상태를 저장할 문자열
		public Memento(String text) {
			this.text = text;
		}
		public void setState(String text) {
			this.text = text;
		}
		public String getState() {
			return text;
		}
	}
}

public class SE {
	public static void main(String[] args) {
		Text text = new Text();
		text.setText("This is SE1 study");	//현재 상태의 문자열
		text.createMemento();	//현재 상태의 문자열을 memento를 생성하여 기억한다.
		text.setText("This is SE2 study");
		text.setText("This is SE3 study");
		text.createMemento();
		text.setText("This is SE4 study");
		text.setText("This is SE5 study");
		text.createMemento();
		
		text.setMemento(0); text.showText();
		//memento를 불러와서 현재 상태를 바꾸고 출력한다.
		text.setMemento(1); text.showText();
		text.setMemento(2); text.showText();
	}
}
*/


//interpreter 패턴

interface Expression {	//공통점을 일반화허여 interface를 선언
	String interpret();
}
class OperandExpression implements Expression {	//OperandExpression class는 Expression을 구현한다.
	//단말 노드이다.
	String data;	//단말 노드에 저장된 data
	public OperandExpression(String data) {
		this.data = data;
	}
	public String interpret() {
		return data;	//그대로 반환한다.
	}
}
class OperatorAddExpression implements Expression {	//OperatorAddExpression class는 Expression을 구현한다.
	OperandExpression left;	//비단말 노드이므로 단말노드 or 비단말 노드를 가리키는 left, right 변수 선언
	OperandExpression right;
	public OperatorAddExpression(String data) {
		String[] temp = data.split(" ");	//연산자와 피연산자를 나눈다
		left = new OperandExpression(temp[0]);	//연산자 기준으로 왼쪽 피연산자를 단말에 저장
		right = new OperandExpression(temp[2]);	//연산지 기준으로 오른쪽 피연산자를 단말에 저장
	}
	public String interpret() {	//"+" 대신 "ADD" 라는 문자열로 번역하였다.
		return left.data + " ADD " + right.data; 
	}
}
class OperatorSubExpression implements Expression {	//OperatorSubExpression class는 Expression을 구현한다.
	OperandExpression left;
	OperandExpression right;
	public OperatorSubExpression(String data) {
		String[] temp = data.split(" ");	//연산자와 피연산자를 나눈다
		left = new OperandExpression(temp[0]);
		right = new OperandExpression(temp[2]);
	}
	public String interpret() {	//"+" 대신 "SUB" 라는 문자열로 번역하였다.
		return left.data + " SUB " + right.data;
	}
}
public class SE {
	public static void main(String[] args) {
		Expression context1 = new OperatorAddExpression("10 + 20");
		System.out.println(context1.interpret());	//사용자가 입력한 수식을 어떻게 번역하였는지 출력
		Expression context2 = new OperatorSubExpression("10 - 20");
		System.out.println(context2.interpret());	//사용자가 입력한 수식을 어떻게 번역하였는지 출력
	}
}
