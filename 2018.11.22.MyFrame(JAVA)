import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.io.*;

class MyDialog extends JDialog {
	private JTextField field = new JTextField(10);
	private JButton button;
	private JLabel label;

	public MyDialog(JFrame frame, String lab, String but) {
		super(frame, "Dialog", true);
		label = new JLabel(lab);
		button = new JButton(but);
		setLayout(new BorderLayout());
		add(label, BorderLayout.NORTH);
		add(field, BorderLayout.CENTER);
		add(button, BorderLayout.SOUTH);
		setSize(400, 110);
		setLocation(600, 200);

		button.addActionListener(e -> setVisible(false));
		setVisible(true);
	}

	public String getField() {
		if (field.getText().length() == 0)
			return null;
		return field.getText();
	}
}

class MyFrame extends JFrame implements ActionListener {
	JMenuBar mb;
	JMenu[] screenMenu;
	JMenuItem[][] item;
	MyDialog dialog;
	String text;
	JLabel label;
	JFileChooser chooser;
	JButton[] musicButton;
	Clip clip;
	Container c;
	JPanel panel;
	JLabel[] labels = new JLabel[5];
	int check = 0;
	Timer timer;

	public MyFrame() {
		setTitle("menu");
		createMenu();
		setSize(500, 300);
		setLocation(300, 100);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	}

	private void createMenu() {
		mb = new JMenuBar();
		screenMenu = new JMenu[3];
		screenMenu[0] = new JMenu("Text");
		screenMenu[1] = new JMenu("Image");
		screenMenu[2] = new JMenu("Audio");
		mb.add(screenMenu[0]);
		mb.add(screenMenu[1]);
		mb.add(screenMenu[2]);

		item = new JMenuItem[3][2];

		screenMenu[0].add(item[0][0] = new JMenuItem("ColorChange"));
		item[0][0].addActionListener(this);
		screenMenu[0].addSeparator();
		screenMenu[0].add(item[0][1] = new JMenuItem("기능01"));
		item[0][1].addActionListener(this);
		screenMenu[1].add(item[1][0] = new JMenuItem("MaskImage"));
		item[1][0].addActionListener(this);
		screenMenu[1].addSeparator();
		screenMenu[1].add(item[1][1] = new JMenuItem("기능11"));
		item[1][1].addActionListener(this);
		screenMenu[2].add(item[2][0] = new JMenuItem("PlayAudio"));
		item[2][0].addActionListener(this);
		screenMenu[2].addSeparator();
		screenMenu[2].add(item[2][1] = new JMenuItem("기능21"));
		item[2][1].addActionListener(this);
		
		mb.setBackground(Color.BLACK);
		for(int i = 0; i < screenMenu.length; i++) {
			screenMenu[i].setForeground(Color.YELLOW);
			screenMenu[i].setFont(new Font("Serif", Font.BOLD, 15));
			for(int j = 0; j < item[i].length; j++) {
				item[i][j].setFont(new Font("Serif", Font.BOLD, 15));
				item[i][j].setBackground(Color.BLACK);
				item[i][j].setForeground(Color.YELLOW);
			}
		}
		setJMenuBar(mb);
	}

	public void actionPerformed(ActionEvent e) {
		String str = e.getActionCommand();
		
		c = getContentPane();
		getContentPane().removeAll();
		revalidate();
		repaint();

		panel = new JPanel();

		switch (str) {
		case "ColorChange":
			panel.setLayout(new GridLayout(0, 1));
			do {
				dialog = new MyDialog(this, "출력을 하고 싶은 텍스트 입력해 주세요", "OK");
				text = dialog.getField();
			} while (text == null);
			
			labels[check] = new JLabel(text);
			labels[check].setForeground(colorChooser());
			labels[check].setHorizontalAlignment(SwingConstants.CENTER);
			labels[check].setFont(new Font("Ravie", Font.ITALIC, 30));
			
			for(int i = 0; i <= check; i++)
				panel.add(labels[i], BorderLayout.CENTER);
			
			if(check == 4)
				check = 0;
			else
				check++;
			panel.setSize(500, 300);

			setSize(500, 300);
			c.add(panel);
			break;
		case "기능01": // 구현부탁 드려요
			
			break;
		case "MaskImage":
			BufferedImage image;
			int width, height;

			try {
				String path = fileChooser("jpg", "png");

				if (path == null)
					break;

				File file = new File(path);

				image = ImageIO.read(file);
				width = image.getWidth();
				height = image.getHeight();

				do {
					dialog = new MyDialog(this, "마스크할 색상을 입력하시오(normal, red, green, blue, reverse)", "OK");
					text = dialog.getField();
				} while (!(text.equals("normal") || text.equals("red") || text.equals("green") || text.equals("blue")
						|| text.equals("reverse")));

				int[] mask = new int[3];
				if (text.equals("normal")) {
					mask[0] = 255;
					mask[1] = 255;
					mask[2] = 255;
				} else if (text.equals("red")) {
					mask[0] = 255;
					mask[1] = 0;
					mask[2] = 0;
				} else if (text.equals("green")) {
					mask[0] = 0;
					mask[1] = 255;
					mask[2] = 0;
				} else if (text.equals("blue")) {
					mask[0] = 0;
					mask[1] = 0;
					mask[2] = 255;
				}

				if (text.equals("reverse")) {
					for (int r = 0; r < height; r++) {
						for (int c = 0; c < width; c++) {
							Color color = new Color(image.getRGB(c, r));
							int red = (int) ((color.getRed()) ^ 255);
							int green = (int) ((color.getGreen()) ^ 255);
							int blue = (int) ((color.getBlue()) ^ 255);
							Color newColor = new Color(red, green, blue);
							image.setRGB(c, r, newColor.getRGB());
						}
					}
				} else {
					for (int r = 0; r < height; r++) {
						for (int c = 0; c < width; c++) {
							Color color = new Color(image.getRGB(c, r));
							int red = (int) ((color.getRed()) & mask[0]);
							int green = (int) ((color.getGreen()) & mask[1]);
							int blue = (int) ((color.getBlue()) & mask[2]);
							Color newColor = new Color(red, green, blue);
							image.setRGB(c, r, newColor.getRGB());
						}
					}
				}

				label = new JLabel();
				label.setIcon(new ImageIcon(image));
				panel.add(label);
				c.add(panel);
				pack();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
			break;
		case "기능11": // 구현부탁 드려요

			break;
		case "PlayAudio":
			String path = fileChooser("wav", "wav");

			if (path == null)
				break;

			loadAudio(path);
			musicButton = new JButton[3];
			JPanel panel1 = new JPanel(), panel2 = new JPanel();
			

			musicButton[0] = new JButton("play");
			musicButton[0].addActionListener(new MyActionListener());
			musicButton[1] = new JButton("stop");
			musicButton[1].addActionListener(new MyActionListener());
			musicButton[2] = new JButton("play again");
			musicButton[2].addActionListener(new MyActionListener());
			panel.setLayout(new GridLayout(0, 1));

			panel1.add(musicButton[0]);
			panel1.add(musicButton[1]);
			panel1.add(musicButton[2]);
			label = new JLabel("AUDIO STOP~");
			label.setFont(new Font("Ravie", Font.ITALIC, 50));
			
			panel2.add(label);
			panel.setSize(500, 300);
			
			panel.add(panel1);
			panel.add(panel2);
			
			setSize(500, 300);
			c.add(panel);
			timer = new Timer(1000, new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					Color myColor = new Color((int)(Math.random()*256), (int)(Math.random()*256), (int)(Math.random()*256));
					panel.setBackground(myColor);
					panel1.setBackground(myColor);
					panel2.setBackground(myColor);
					label.setBackground(myColor);
					label.setForeground(new Color((int)(Math.random()*256), (int)(Math.random()*256), (int)(Math.random()*256)));
				}
			});
			break;
		case "기능21": // 구현부탁 드려요~

			break;
		default:
			System.out.println("실행되면 안됨");
		}
		revalidate();
		repaint();
	}

	public Color colorChooser() {
		Color color = JColorChooser.showDialog(null, "Color", Color.BLACK);
		return color;
	}

	public String fileChooser(String s1, String s2) {
		chooser = new JFileChooser();

		FileNameExtensionFilter filter = new FileNameExtensionFilter(s1 + " & " + s2 + " Images", s1, s2);

		chooser.setFileFilter(filter);

		int ret = chooser.showOpenDialog(null);

		if (ret != JFileChooser.APPROVE_OPTION) {
			JOptionPane.showMessageDialog(null, "파일을 선택하지 않았습니다", "경고", JOptionPane.WARNING_MESSAGE);
			return null;
		}

		return chooser.getSelectedFile().getPath();
	}

	public void loadAudio(String pathName) {
		try {
			clip = AudioSystem.getClip();
			File audioFile = new File(pathName);

			AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);

			clip.open(audioStream);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	class MyActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			switch (e.getActionCommand()) {
			case "play":
				clip.start();
				label.setText("AUDIO START~");
				timer.start();
				break;
			case "stop":
				clip.stop();
				label.setText("AUDIO STOP");
				timer.stop();
				break;
			case "play again":
				clip.setFramePosition(0);
				clip.start();
				break;
			}
		}
	}
}

public class HW4MyFrame {
	public static void main(String[] args) {
		new MyFrame();
	}
}
