import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

class Calculator extends JFrame implements ActionListener, KeyListener {
	private String[] labels = {
			"BackSpace", "(", ")", "C",
			"7", "8", "9", "+",
			"4", "5", "6", "-",
			"1", "2", "3", "*",
			"=", "0", ".", "/",
			"일반모드", "수식모드", "", ""};
	JPanel panel1, panel2, panel3;
	JButton[] buttons;
	JTextField field = new JTextField(30);
	
	public Calculator() {
		setSize(400, 300);
		setLocation(600, 300);
		field.setEditable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		panel1 = new JPanel();
		panel2 = new JPanel();
		panel3 = new JPanel();
		
		panel1.setLayout(new BorderLayout());
		panel2.setLayout(new BorderLayout());
		panel3.setLayout(new GridLayout(0, 4, 3, 3));
		
		add(panel1);
		panel1.add(panel2, BorderLayout.NORTH);
		panel1.add(panel3, BorderLayout.CENTER);
		panel2.add(field, BorderLayout.NORTH);
		
		panel3.setBackground(Color.BLACK);
		
		buttons = new JButton[labels.length];
		for(int i = 0; i < buttons.length; i++) {
			buttons[i] = new JButton(labels[i]);
			buttons[i].setBackground(Color.YELLOW);
			buttons[i].setFont(new Font("Serif", Font.BOLD, 12));
			buttons[i].addActionListener(this);
			panel3.add(buttons[i]);
		}
		
		field.requestFocus();
		field.setFocusable(true);
		field.addKeyListener(this);
		
		setVisible(true);
	}
	
	public void actionPerformed(ActionEvent e) {
		switch(e.getActionCommand()) {
		case "=":
			try {
				double result = Calculation.calculation(field.getText());
				field.setText(field.getText() + " = " + result);
			}
			catch(Exception ex) {
				field.setText("비정상적인 계산식입니다. 식을 다시 입력해주세요");
			}
			break;
		case "BackSpace":
			if(field.getText().length() != 0 && field.getText().substring(field.getText().length()-1).equals(" "))
				field.setText(field.getText().substring(0, field.getText().length()-1));
			if(field.getText().length() != 0)
				field.setText(field.getText().substring(0, field.getText().length()-1));
			break;
		case "C":
			field.setText("");
			break;
		case "일반모드":
			field.setEditable(false);
			for(int i = 0; i < buttons.length-4; i++)
				buttons[i].setEnabled(true);
			break;
		case "수식모드":
			field.setEditable(true);
			for(int i = 0; i < buttons.length-4; i++)
				buttons[i].setEnabled(false);
			break;
		default:
			if(e.getActionCommand().equals("(") || e.getActionCommand().equals(")") || 
					e.getActionCommand().equals("+") || e.getActionCommand().equals("-") ||
					e.getActionCommand().equals("*") || e.getActionCommand().equals("/"))
				if(field.getText().length() == 0 || field.getText().substring(field.getText().length()-1).equals(" "))
					field.setText(field.getText() + e.getActionCommand() + " ");
				else
					field.setText(field.getText() + " " + e.getActionCommand() + " ");
			else
				field.setText(field.getText() + e.getActionCommand());
			break;
		}
	}
	
	public void keyPressed(KeyEvent e) {
		String[] temp = field.getText().split(" ");
		
		if(temp.length >= 7) {
			field.setText(field.getText().substring(0, field.getText().length()-2));
		}
		
		if(e.getKeyCode() == KeyEvent.VK_ENTER)
			if(field.getText().length() == 0)
				return;
			else if(field.getText().substring(field.getText().length()-1).equals("=")) {
				try {
					double result = Calculation.calculation(field.getText().substring(0, field.getText().length()-2));
					field.setText(field.getText() + " " + result);
				}
				catch(Exception ex) {
					field.setText("비정상적인 계산식입니다. 식을 다시 입력해주세요~");
				}		
			}
	}
	
	public void keyReleased(KeyEvent e) {}
	public void keyTyped(KeyEvent e) {}
}

class Calculation {
	public static double calculation(String ori) throws Exception {		//사칙연산 계산 메소드
		String[] temp = ori.split(" ");
		ArrayList<Object> postfix = new ArrayList<>();
		Deque<String> stack = new ArrayDeque<>();
		
		for(int i = 0; i < temp.length; i++) {
			if(!(temp[i].equals("(") || temp[i].equals(")") || 
					temp[i].equals("+") || temp[i].equals("-") ||
					temp[i].equals("*") || temp[i].equals("/"))) {
				postfix.add(Double.parseDouble(temp[i]));
			}
			else {
				switch(temp[i]) {
				case "(":
					stack.offerFirst(temp[i]);
					break;
				case ")":
					while(!stack.peekFirst().equals("("))
						postfix.add(stack.pollFirst());
					stack.pollFirst();
					break;
				case "+": case "-": case "*": case "/":
					while(!stack.isEmpty() && compare(stack.peekFirst(), temp[i]) >= 0)
						postfix.add(stack.pollFirst());
					stack.offerFirst(temp[i]);
					break;
				}
			}
		}
		
		while(!stack.isEmpty())
			postfix.add(stack.pollFirst());
		
		Deque<Double> stack2 = new ArrayDeque<>();
		
		for(int i = 0; i < postfix.size(); i++) {
			if(postfix.get(i) instanceof Number)
				stack2.offerFirst((double)postfix.get(i));
			else {
				double num1 = stack2.pollFirst();
				double num2 = stack2.pollFirst();
				String op = (String)postfix.get(i);
				
				switch(op) {
				case "+":
					stack2.offerFirst(num2 + num1);
					break;
				case "-":
					stack2.offerFirst(num2 - num1);
					break;
				case "*":
					stack2.offerFirst(num2 * num1);
					break;
				case "/":
					stack2.offerFirst(num2 / num1);
					break;
				}
			}
		}
		return stack2.pollFirst();
	}
	
	private static int priority(String a) {		//가중치 반환 메소드
		switch (a) {
		case "*":
		case "/":
			return 5;
		case "+":
		case "-":
			return 3;
		case "(":
			return 1;
		}
		return 0;
	}
	private static int compare(String a, String b) {	//우선순위 판단 메소드
		int A = priority(a);
		int B = priority(b);

		if (A > B)
			return 1;
		else if (A == B)
			return 0;
		else
			return -1;
	}
}

public class MyCalc {
	public static void main(String[] args) {
		Calculator calc = new Calculator();
	}
}
